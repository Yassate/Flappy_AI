import pygame
import os
import random
import numpy as np
import matplotlib.pyplot as plt
import time
from collections import namedtuple


pygame.font.init()

PROJECT_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

BIRD_IMGS = [pygame.transform.scale2x(pygame.image.load(os.path.join(PROJECT_PATH, "media", "img", "bird1.png"))),
             pygame.transform.scale2x(pygame.image.load(os.path.join(PROJECT_PATH, "media", "img", "bird2.png"))),
             pygame.transform.scale2x(pygame.image.load(os.path.join(PROJECT_PATH, "media", "img", "bird3.png")))]

PIPE_IMG = pygame.transform.scale2x(pygame.image.load(os.path.join(PROJECT_PATH, "media", "img", "pipe.png")))
BASE_IMG = pygame.transform.scale2x(pygame.image.load(os.path.join(PROJECT_PATH, "media", "img", "base.png")))
BG_IMG = pygame.transform.scale2x(pygame.image.load(os.path.join(PROJECT_PATH, "media", "img", "bg.png")))
WIN_WIDTH = 500
WIN_HEIGHT = 800
POPULATION_SIZE = 1
FPS = 5
NO_JUMP = 0
JUMP = 1

State = namedtuple('State', 'y_dif, vel, x_dist')

STAT_FONT = pygame.font.SysFont("comicsans", 50)


class Bird:
    IMGS = BIRD_IMGS
    MAX_ROTATION = 25
    ROT_VEL = 20
    ANIMATION_TIME = 5
    Y_DIF = 0
    VEL = 1
    X_DIST = 2

    def __init__(self, x, y):
        self._reward = 0
        self._y_dif = 0
        self._y_prev_dif = 0
        self.last_action = 0
        self.tilt = 0
        self.tick_count = 0
        self.vel = 0
        self.img_count = 0
        self.frames_alive = 0
        self.d = 0
        self.x = x
        self.y = y
        self.height = self.y
        self.img = self.IMGS[0]
        self.curr_state = [0, 0, 0]
        self.prev_state = [0, 0, 0]

    def update_last_action(self):
        if self.d < 0:
            self.last_action = 1
        else:
            self.last_action = 0

    def get_last_action(self):
        return self.last_action

    @property
    def y_dif(self):
        return self._y_dif

    @y_dif.setter
    def y_dif(self, y_dif):
        self._y_prev_dif = self._y_dif
        self._y_dif = y_dif

    @property
    def y_prev_dif(self):
        return self._y_prev_dif

    @y_prev_dif.setter
    def y_prev_dif(self, y_prev_dif):
        self._y_prev_dif = y_prev_dif

    @property
    def reward(self):
        return self._reward

    @reward.setter
    def reward(self, reward):
        self._reward = reward

    def add_reward(self, addition):
        self.reward = self.reward + addition



    def jump(self):
        self.vel = -10.5
        self.tick_count = 0
        self.height = self.y

    def move(self):
        self.tick_count += 1
        self.d = self.vel*self.tick_count + 1.5*self.tick_count**2
        #vel is on minus after jump method; second part of equation creates gravity impression

        if self.d>= 16:
            self.d = 16
        elif self.d < 0:
            self.d -= 2

        self.y = self.y + self.d

        if self.d < 0 or self.y < self.height + 50:
            if self.tilt < self.MAX_ROTATION:
                self.tilt = self.MAX_ROTATION
        else:
            if self.tilt > -90:
                self.tilt -= self.ROT_VEL

    def draw(self, win):
        self.img_count += 1

        if self.img_count < self.ANIMATION_TIME:
            self.img = self.IMGS[0]
        elif self.img_count < self.ANIMATION_TIME*2:
            self.img = self.IMGS[1]
        elif self.img_count < self.ANIMATION_TIME*3:
            self.img = self.IMGS[2]
        elif self.img_count < self.ANIMATION_TIME*4:
            self.img = self.IMGS[1]
        elif self.img_count == self.ANIMATION_TIME*4+1:
            self.img = self.IMGS[0]
            self.img_count = 0

        if self.tilt <= -80:
            self.img = self.IMGS[1]
            self.img_count = self.ANIMATION_TIME*2

        rotated_image = pygame.transform.rotate(self.img, self.tilt)
        new_rect = rotated_image.get_rect(center=self.img.get_rect(topleft = (self.x, self.y)).center)
        win.blit(rotated_image, new_rect.topleft)

    def collided(self, pipes):
        for pipe in pipes:
            if pipe.collide(self):
                return True
        return False

    def out_of_screen(self):
        return self.y + self.img.get_height() >= 730 or self.y < 0

    def middle_pipe_passed(self,pipes):
        pipe_i = 1 if len(pipes) > 1 else 0
        if pipes[pipe_i].x < self.x:
            return True
        return False

    def get_mask(self):
        return pygame.mask.from_surface(self.img)


class Pipe:
    GAP = 200
    VEL = 5

    def __init__(self, x):
        self.x = x
        self.height = 0
        self.gap = 100
        self.top = 0
        self.bottom = 0
        self.PIPE_TOP = pygame.transform.flip(PIPE_IMG, False, True)
        self.PIPE_BOTTOM = PIPE_IMG
        self.passed = False
        self.set_height()

    def set_height(self):
        self.height = random.randrange(50,450)
        self.top = self.height - self.PIPE_TOP.get_height()
        self.bottom = self.height + self.GAP

    def move(self):
        self.x -= self.VEL

    def draw(self, win):
        win.blit(self.PIPE_TOP, (self.x, self.top))
        win.blit(self.PIPE_BOTTOM, (self.x, self.bottom))

    def collide(self, bird):
        bird_mask = bird.get_mask()
        top_mask = pygame.mask.from_surface(self.PIPE_TOP)
        bottom_mask =  pygame.mask.from_surface(self.PIPE_BOTTOM)

        top_offset = (self.x - bird.x, self.top - round(bird.y))
        bottom_offset = (self.x - bird.x, self.bottom - round(bird.y))

        b_point = bird_mask.overlap(bottom_mask, bottom_offset)
        t_point = bird_mask.overlap(top_mask, top_offset)

        if t_point or b_point:
            return True

        return False


class Base:
    VEL = 5
    WIDTH = BASE_IMG.get_width()
    IMG = BASE_IMG

    def __init__(self, y):
        self.y = y
        self.x1 = 0
        self.x2 = self.WIDTH

    def move(self):
        self.x1 -= self.VEL
        self.x2 -= self.VEL

        if self.x1 + self.WIDTH < 0:
            self.x1 = self.x2 + self.WIDTH

        if self.x2 + self.WIDTH < 0:
            self.x2 = self.x1 + self.WIDTH

    def draw(self, win):
        win.blit(self.IMG, (self.x1, self.y))
        win.blit(self.IMG, (self.x2, self.y))


class QArray:

    def __init__(self, q_states, q_actions):
        self.q_array = np.zeros((q_states, q_actions))
        self.l_rate = 0.01

    def should_jump(self, q_state):
        if self.q_array[q_state+800][0] >= self.q_array[q_state+800][1]:
            return False
        return True

    #aka highest expected future reward, means max q value in given state, needed for new Q calculation
    def get_max_q(self, q_state):
        return max(self.q_array[q_state+800][0], self.q_array[q_state+800][1])

    def update_q(self, q_state, q_action, next_q_state, reward, epsilon):
        self.q_array[q_state+800][q_action] += self.l_rate * (reward + epsilon * self.get_max_q(next_q_state) - self.q_array[q_state][q_action])

    def plot(self):
        #plt.imshow(self.q_array)
        #plt.show()
        data0 = self.q_array[:, 0]
        data1 = self.q_array[:, 1]

        #plt.plot(range(-800,800),data0, label = "Data 0", color = 'red')
        #plt.plot(range(-800,800),data1, label = "Data 1", color = 'blue')

        self.fig = plt.figure()
        ax = self.fig.add_subplot(111)
        self.li, = ax.plot(range(-800,800), data1-data0, color = 'red')
        #self.li2, = ax.plot(range(-800, 800), data1)
        ax.relim()
        ax.autoscale_view(True, True, True)
        plt.ylim(-20, 20)
        self.fig.canvas.draw()
        plt.show(block=False)
        plt.pause(0.001)
        #plt.plot(self.q_array[:,1]-self.q_array[:,0])
        #plt.show()

    def update_plot(self):
        #xmin, xmax = plt.xlim()
        #ymin, ymax = plt.ylim()
        #plt.xlim(xmin , xmax)
        #plt.ylim(ymin , ymax+2)
        self.li.set_ydata(self.q_array[:, 1]-self.q_array[:, 0])
        #self.li2.set_ydata(self.q_array[:, 1])
        self.fig.canvas.draw()
        time.sleep(0.01)


class QDictTuple:
    #State indexes -> y_dif, vel, x_dist

    def __init__(self):
        state_ini = State(y_dif=0, vel=0, x_dist=0)
        q_val_ini = [0, 0]
        self.q_dict = {state_ini: q_val_ini}
        self.l_rate = 0.01

    def should_jump(self, q_state):
        if self.q_dict[q_state][NO_JUMP] >= self.q_dict[q_state][JUMP]:
            return False
        return True

    #aka highest expected future reward, means max q value in given state, needed for new Q calculation
    def get_max_q(self, q_state):
        return max(self.q_dict[q_state][NO_JUMP], self.q_dict[q_state][JUMP])



    def update_q(self, q_state, q_action, next_q_state, reward, epsilon):
        if q_state not in self.q_dict:
            self.q_dict[q_state][q_action] = [0, 0]
        self.q_dict[q_state][q_action] += self.l_rate * (reward + epsilon * self.get_max_q(next_q_state) - self.q_dict[q_state][q_action])



def draw_window(win, birds, pipes, base, score):
    win.blit(BG_IMG, (0,0))

    for pipe in pipes:
        pipe.draw(win)

    text = STAT_FONT.render("Score: " + str(score), 1, (255,255,255))
    win.blit(text, (WIN_WIDTH - 10 - text.get_width(),10))

    base.draw(win)
    for bird in birds:
        bird.draw(win)
    pygame.display.update()


def main():
    # States - difference between curr pos and bottom pipe, height = 800 by default, need + and - values so 1600 rows
    # Actions - Idle/Jump
    #q_array values are "quality" of each action in current state
    q_array = QArray(2 * WIN_HEIGHT, 2)
    #q_dict = QDictTuple()

    birds = []
    pipes = []
    frame_counter = 0
    prev_act = 0
    prev_dif = 0
    run = True
    epsilon = 0.7

    base = Base(730)
    win = pygame.display.set_mode((WIN_WIDTH, WIN_HEIGHT))
    clock = pygame.time.Clock()

    while run:
        pipe_ind = 0
        clock.tick(FPS)
        exploration = random.randrange(0, 100)/100 < epsilon
        reset_game = len(birds) == 0

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    q_array.plot()

        if reset_game:
            pipes = []
            pipes.append(Pipe(500))
            for i in range(POPULATION_SIZE):
                birds.append(Bird(230 - i*10, 300))

        for x, pipe in enumerate(pipes):
            if pipe.x + pipe.PIPE_TOP.get_width() < 0:
                pipes.pop(x)
            pipe.move()

        for x, bird in enumerate(birds):
            bird.frames_alive += 1
            if bird.collided(pipes):
                birds.pop(x)
                bird.add_reward(-20)
            elif bird.out_of_screen():
                birds.pop(x)
                bird.add_reward(-20)

            if bird.middle_pipe_passed(pipes) and len(pipes) < 3:
                pipes.append(Pipe(500))
            if len(pipes) > 1 and bird.x > pipes[0].x + pipes[0].PIPE_TOP.get_width():
                pipe_ind = 1

            y_dif = round(pipes[pipe_ind].bottom-50 - bird.y)
            bird.y_dif = y_dif
            #reward range 0-10 from y difference
            #additional value added for each frame when bird is alive
            bird.reward = -round(abs(y_dif/80))
            #bird.add_reward(bird.frames_alive/10)

            if exploration:
                if q_array.should_jump(y_dif):
                    bird.jump()
            else:
                if random.choice([True,False,False,False,False, False, False, False]):
                    bird.jump()
            bird.update_last_action()
            bird.move()

            if frame_counter > 30:
                q_array.update_q(bird.y_prev_dif, bird.get_last_action(), bird.y_dif, bird.reward, epsilon)

        if frame_counter == 61:
            q_array.plot()
        if frame_counter > 61 and frame_counter%10 == 0:
            q_array.update_plot()

        prev_dif = y_dif
        number_to_show = bird.d
        base.move()
        epsilon = epsilon - 0.0001
        frame_counter += 1
        draw_window(win, birds, pipes, base, number_to_show)

main()